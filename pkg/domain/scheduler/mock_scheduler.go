// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dondakeshimo/todo-cli/pkg/domain/scheduler (interfaces: Scheduler)

// Package scheduler is a generated GoMock package.
package scheduler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// ClearExpired mocks base method
func (m *MockScheduler) ClearExpired() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearExpired")
}

// ClearExpired indicates an expected call of ClearExpired
func (mr *MockSchedulerMockRecorder) ClearExpired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearExpired", reflect.TypeOf((*MockScheduler)(nil).ClearExpired))
}

// Register mocks base method
func (m *MockScheduler) Register(arg0 Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockSchedulerMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockScheduler)(nil).Register), arg0)
}

// RemoveWithID mocks base method
func (m *MockScheduler) RemoveWithID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWithID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWithID indicates an expected call of RemoveWithID
func (mr *MockSchedulerMockRecorder) RemoveWithID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWithID", reflect.TypeOf((*MockScheduler)(nil).RemoveWithID), arg0)
}
